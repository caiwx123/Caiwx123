一、编码要求
在Github仓库中新建一个学号为名的文件夹。

在开始实现程序之前，在PSP表格[附录1]记录下你估计在程序开发各个步骤上耗费的时间，在你实现程序之后，在PSP表格记录下你在程序的各个模块开发上实际花费的时间。

使用C++ 、Java或者python3实现，提交python代码时请附带上requirements.txt，。C++请使用Visual Studio Community 2019进行开发，运行环境为64-bit Windows 10。对于C++/Java，还需将编译好的程序发布到Github仓库中的releases中

提交的代码要求经过Code Quality Analysis工具的分析并消除所有的警告。

完成项目的首个版本之后，请使用性能分析工具Studio Profiling Tools来找出代码中的性能瓶颈并进行改进。

使用Github[附录2]来管理源代码和测试用例，代码有进展即签入Github。签入记录不合理的项目会被助教抽查询问项目细节。

使用单元测试[附录3]对项目进行测试，并使用插件查看测试分支覆盖率等指标；写出至少10个测试用例确保你的程序能够正确处理各种情况。

二、需求
题目：敏感词检测

描述如下：

为了维护网络的健康环境，大部分论坛、网站等，都进行了关于敏感词的设定。有效识别暴恐涉政、恶意推广、辱骂、色情、违反广告法、涉及违禁品等文本内容的算法，具有广泛应用价值。

本次作业要求设计一个敏感词检测算法，并对其中的敏感词进行标记。给定一个黑名单词汇文件和待检测文件，要求在答案文件中输出检测出敏感词汇的数量并按出现输出行号，敏感词词汇及对应检测出的文本。

示例：

敏感词文件：

——以回车分割每个敏感词

盗版

垃圾

待检测文件：

拉圾网站，我这里有盗@#版软件。

答案文件示例:

Total: 2

Line1: <垃圾> 拉圾

Line1: <盗版> 盗@#版

要求输入输出采用文件输入输出，规范如下：

从命令行参数给出：敏感词词汇文件的绝对路径。

从命令行参数给出：待检测文件的绝对路径。

从命令行参数给出：输出的答案文件的绝对路径。

我们提供一份样例，文件在QQ群中，org.txt是待检测文件，words.txt是敏感词词汇文件

注意：

中文

中文敏感词可能进行一些伪装，在敏感词中插入除字母、数字、换行的若干字符仍属于敏感词。如：当山寨为敏感词词汇时，山_寨，山@寨，山 寨，均可视为敏感词。

中文文本中存在部分谐音替换、拼音替代、拼音首字母替代的敏感词（拼音不区分大小写），如 shan寨，栅寨，山Z等均可视为敏感词。

中文文本中还存在少部分较难检测变形如繁体、拆分偏旁部首(只考虑左右结构)等。

不存在变形后再拆开偏旁部首的情况。

英文

英文文本不区分大小写，在敏感词中插入若干空格、数字等其他符号(换行、字母除外)，也属于敏感词，如hello为敏感词时，he_llo，h%ell@o，he llo均为敏感词 。

多个敏感词之间不考虑嵌套出现的情况，但可能存在变形后插入字符的情况。

敏感词中间一次插入的字符不超过20个

对输出进行一些可视化表示，如自动生成统计图、词云图等等（不要在测试的main文件中体现）。

三、测试须知
在进行代码测试的时候，以Windows环境为例(但并不意味着程序一定在Windows环境下进行测试)，我们是按照传递命令行参数的方式提供文件的位置，您的提交的作业程序需要从指定的位置读取文件，并向指定的文件输出答案：

Python: python main.py [敏感词词汇文件] [待检测文件] [答案文件]

C: main.exe [敏感词词汇文件] [待检测文件] [答案文件]

Java: java -jar main.jar [敏感词词汇文件] [待检测文件] [答案文件]

保证每个参数以空格隔开，文件路径中不含有空格，例如：

java -jar main.jar C:\tests\org.txt C:\tests\org_add.txt C:\tests\ans.txt

——至于如何在程序里接受命令行参数可以去搜索一下

Python需要将入口文件名设置成main.py，C/C++需要提供可执行文件main.exe，Java需要提供编译好的jar包main.jar

一共有15个测试点（不含样例），测试作为评判功能是否正常的依据，全过就没问题，不过要扣分。

——复制别人的可执行程序进行提交骗过测试的行为同样是抄袭，我们会验证你的代码是否可以正常编译、以及是否可以编译出（与你提交的可执行文件）逻辑相同的可执行文件

如遇到下列情况之一，当前测试点将不能通过，对于每个不能通过的测试点从程序评分中扣2分：

程序内存泄漏严重

5秒内未给出答案（视测试文件大小调整）

占用的内存超过2048MB

发生异常退出

凡提交的可执行文件、出现下列情况之一者，作业以0分计：

尝试连接网络

尝试读写其他文件

尝试妨碍评测——例如: system("shutdown")

四、评分规则
[1]博客评分规则
总分60分

1.(1.1)在Github仓库中新建一个学号为名的文件夹，同时在博客正文首行给出作业github链接。（3'）

请以下列标题分割你的博客（冒号后的文字设置为一级标题，以下内容从正文第二行开始）

——博客要求参考第一次博客作业，截止后不再给予修改机会。

2.标题一：一、PSP表格

(2.1)在开始实现程序之前，在附录提供PSP表格记录下你估计将在程序的各个模块的开发上耗费的时间。（3'）

(2.2)在你实现完程序之后，在附录提供的PSP表格记录下你在程序的各个模块的开发上实际花费的时间。（3'）

3.标题二：二、计算模块接口

(3.1)计算模块接口的设计与实现过程。设计包括代码如何组织，比如会有几个类，几个函数，他们之间关系如何，关键函数是否需要画出流程图？说明你的算法的关键（不必列出源代码），以及独到之处。（18'）

(3.2)计算模块接口部分的性能改进。记录在改进计算模块性能上所花费的时间，描述你改进的思路，并展示一张性能分析图（由VS 2019、JProfiler或者Jetbrains系列IDE自带的Profiler的性能分析工具自动生成），并展示你程序中消耗最大的函数。（12'）

(3.3)计算模块部分单元测试展示。展示出项目部分单元测试代码，并说明测试的函数，构造测试数据的思路。并将单元测试得到的测试覆盖率截图，发表在博客中。（12'）

(3.4)计算模块部分异常处理说明。在博客中详细介绍每种异常的设计目标。每种异常都要选择一个单元测试样例发布在博客中，并指明错误对应的场景。（6'）

4.标题三：三、心得

(4.1)在完成本次作业过程的心得体会（3'）

 

 

[2]程序评分规则（40分）
总分40分，程序评分是根据代码质量综合考量给出的评分，主要考察如下方面：

(5.1)算法的性能（耗费的时间、占用的系统资源、准确度等）（20'）

(5.2)代码的可读性（注释等）（10'）

(5.3)变量、函数、类命名的规范化（10'）

五、附录
1.PSP表格
PSP是卡耐基梅隆大学（CMU）的专家们针对软件工程师所提出的一套模型：Personal Software Process (PSP， 个人开发流程，或称个体软件过程)。

PSP2.1	Personal Software Process Stages	预估耗时（分钟）	实际耗时（分钟）
Planning	计划	 	 
· Estimate	· 估计这个任务需要多少时间	 	 
Development	开发	 	 
· Analysis	· 需求分析 (包括学习新技术)	 	 
· Design Spec	· 生成设计文档	 	 
· Design Review	· 设计复审	 	 
· Coding Standard	· 代码规范 (为目前的开发制定合适的规范)	 	 
· Design	· 具体设计	 	 
· Coding	· 具体编码	 	 
· Code Review	· 代码复审	 	 
· Test	· 测试（自我测试，修改代码，提交修改）	 	 
Reporting	报告	 	 
· Test Repor	· 测试报告	 	 
· Size Measurement	· 计算工作量	 	 
· Postmortem & Process Improvement Plan	· 事后总结, 并提出过程改进计划	 	 
 	· 合计	 	 
一个功能完备的程序不是一蹴而就的。可将一个大任务划分为可操作的小任务，同时最好按照任务难度或紧急程度指定各个任务的完成次序。因此，在动手开发之前，要先估计将在程序各模块开发所需耗费的时间，以及完成整个项目所需的时间，将这个[估计值]记录下来，写成PSP 的形式。 PSP的目的是：记录工程师如何实现需求的效率，和我们使用项目管理工具（例如微软的Project Professional，或者禅道等）进行项目进度规划类似。 有关PSP的更多内容，请自行阅读邹欣老师的博客：现代软件工程讲义 2 工程师的能力评估和发展

2.Github
请阅读邹欣老师的博客：源代码管理，了解源代码管理的10个实践问题。 本次作业要求使用Github进行源代码管理，代码有进展即签入Github。签入记录不合理的项目会被助教抽查询问项目细节。 对代码签入的具体要求如下：根据需求划分功能后，每做完一个功能，编译成功后，应至少commit一次。本例中，至少应区分基本功能和扩展功能，即分别针对基本功能、扩展功能，编译成功后，总共至少应commit两次。具体的功能划分，请自行定义，并在撰写博客时体现出来，遵循自己对需求的功能划分来提交代码即可。 对Commit不是很熟悉的话，请阅读阮一峰的博客：Commit message 和 Change log 编写指南，了解更多细节。

3.单元测试
请根据自己以往积累的测试经验，在编码完成之后，提交产品之前，设计测试用例，并编写单元测试，对自己的项目进行测试。 首先，至少应采用白盒测试用例设计方法来设计测试用例，其他测试方法不限。其次，要设计至少10个测试用例，确保你的程序能够正确处理各种情况。最后，结合测试评估的要求，对自己的测试设计进行评价，这些测试用例能满足该程序测试的要求吗？ 另一个重要的措施是要把单元测试自动化，这样每个人都能很容易地运行它，并且可以使单元测试每天都运行。每个人都可以随时在自己的机器上运行。团队一般是在每日构建中运行单元测试的，这样每个单元测试的错误就能及时被发现并得到修改。 推荐阅读邹欣老师的博客：现代软件工程讲义 2 开发技术 - 单元测试 & 回归测试
